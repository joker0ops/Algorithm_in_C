/****************************************************************************

串：
1.  定义：包含0个或多个字符的字符串
    子串：串中任意个连续的字符组成的子序列
    主串：包含子串的串
    字符在主串中的位置：字符首次在主串中出现的位序
    子串在主串中的位置：子串首次在主串中出现的位置，该位置表现为子串的第一个字符在主串中的位序
    空串≠空格串
2.  串的基本操作：（串的基本操作一般都是以子串为基本单位）
    SubString(&Sub,S,pos,len)：求子串。用Sub返回串S的第pos个字符起长度为len的子串
    Index(S,T)：定位操作。若主串S中存在与串T相同的子串，则返回它在主串S中第一次出现的位置；否则返回0
    StrCompare(S,T)：比较操作，若S>T则返回值大于0；若S<T则返回值小于0；若S=T则返回值等于0
    串的比较原则：
    a. 从第一个字符开始向后依次对比，先出现更大字符串的串就更大
    b. 长串的前缀与短串相同时，长串更大
    c. 只有两个串完全相同时才相等
3.  串的存储结构：
    见String.cpp
4.  串的朴素模式匹配算法：

    较好的情况：在匹配成功之前每个子串的第一个字符就与模式串不匹配
    若主串长度为n，模式串长度为m
    则匹配成功的最好时间复杂度：O(m)
    // 匹配失败时，长度为n的主串有n-m+1个长度为m的子串,i要从1走到n-m+1发现仍不匹配
    匹配失败的最好事件复杂度：O(n-m+1)=O(n-m)≈O(n)  （一般情况下n>>m）

    较坏的情况：每个子串的前n-1个字符都和模式串匹配，只有第m个字符不匹配
    若模式串长度为m，主串长度为n，则匹配成功或匹配失败最多需要(n-m+1)*m次比较
    最坏时间复杂度：O(nm)

广义表：
1.  定义：广义表是线性表的推广（线性表的每个元素只能是单个原子，而广义表的元素还可以是广义表），有时也称广义表为列表（Lists）
    一般用英文GList表示
2.  概述：广义表一般记作LS=(a1,a2,a3,a4,a5,a6,...,an),其中ai可以是单个元素（原子），也可以是子表。习惯上用大写字母表示广义表，
    用小写字母表示原子，称第一个元素a1为LS的表头hp，其余元素组成的子表(a2,a3,...,an)为LS的表尾。故表头可能是子表也可能是
    原子，而表尾一定是子表。广义表的存储表示通常采用链式存储结构，每个数据元素使用一个节点表示。
3.  存储表示：见GList.cpp

****************************************************************************/